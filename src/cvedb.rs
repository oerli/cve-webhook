use reqwest::ClientBuilder;

use serde::{Serialize, Deserialize, Deserializer, de};
use std::{io::Read, str::FromStr};
use std::fmt::Display;

use std::fs::File;

use chrono::NaiveDate;

use futures::future;

#[derive(Debug, Deserialize)]
pub struct CveConfig {
    pub items: Vec<CveConfigType>
}

#[derive(Debug, Deserialize)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum CveConfigType {
    Vendor (Vendor),
    Product (Product)
}

#[derive(Debug, Deserialize)]
pub struct Vendor {
    pub vendor: String,
    pub id: u32,
    pub cve: Option<Vec<Cve>>
}

#[derive(Debug, Deserialize)]
pub struct Product {
    pub product: String,
    pub id: u32,
    pub cve: Option<Vec<Cve>>
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Cve {
    cve_id: String,
    #[serde(deserialize_with = "from_str")]
    cwe_id: u32,
    summary: String,
    #[serde(deserialize_with = "from_str")]
    pub cvss_score: f32,
    #[serde(deserialize_with = "from_str")]
    exploit_count: u32,
    pub publish_date: NaiveDate,
    pub update_date: NaiveDate,
    url: Option<String>,
}

// deserialize number from text
fn from_str<'de, T, D>(deserializer: D) -> Result<T, D::Error> where T: FromStr, T::Err: Display, D: Deserializer<'de> {
    let s = String::deserialize(deserializer)?;
    T::from_str(&s).map_err(de::Error::custom)
}

impl CveConfig {
    pub async fn new(config_path: &str) -> Result<Self, Box<dyn std::error::Error>> {
        let mut buffer = String::new();

        File::open(&config_path)?.read_to_string(&mut buffer)?;
        Ok(CveConfig {items: serde_yaml::from_str(&buffer)?})
    }
    
    pub async fn update(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        let client = &ClientBuilder::new().build()?;
        
        future::join_all(self.items.iter_mut().map(|item| async move {
            match item {
                CveConfigType::Product(product) => {
                    product.cve = client.get(format!("https://www.cvedetails.com/json-feed.php?numrows=5&orderby=2&product_id={}", product.id)).send().await.unwrap().json::<Vec<Cve>>().await.ok();
                }
                CveConfigType::Vendor(vendor) => {
                    vendor.cve = client.get(format!("https://www.cvedetails.com/json-feed.php?numrows=5&orderby=2&vendor_id={}", vendor.id)).send().await.unwrap().json::<Vec<Cve>>().await.ok();
                }
            }
            
        })).await;

        Ok(())
    }
}