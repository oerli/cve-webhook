use reqwest::{Client, ClientBuilder};

use serde::{Serialize, Deserialize, Deserializer, de};
use std::{io::Read, str::FromStr};
use std::fmt::Display;

use std::fs::File;

use chrono::NaiveDate;

pub struct CveDB {
    client: Client,
    config: CveDBConfig,
    pub results: Vec<CveResult>,
}

#[derive(Serialize, Debug, Clone)]
pub struct CveResult {
    pub config: CveDBConfigItem,
    pub list: Vec<Cve>,
}

#[derive(Deserialize, Debug)]
struct CveDBConfig {
    vendors: Option<Vec<CveDBConfigItem>>,
    products: Option<Vec<CveDBConfigItem>>,
}

#[derive(Deserialize, Serialize, Clone, Debug)]
pub struct CveDBConfigItem {
    name: String,
    id: u32,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Cve {
    cve_id: String,
    #[serde(deserialize_with = "from_str")]
    cwe_id: u32,
    summary: String,
    #[serde(deserialize_with = "from_str")]
    pub cvss_score: f32,
    #[serde(deserialize_with = "from_str")]
    exploit_count: u32,
    pub publish_date: NaiveDate,
    pub update_date: NaiveDate,
    url: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
struct FactValue {
    name: String,
    value: String,
}


// deserialize number from text
fn from_str<'de, T, D>(deserializer: D) -> Result<T, D::Error> where T: FromStr, T::Err: Display, D: Deserializer<'de> {
    let s = String::deserialize(deserializer)?;
    T::from_str(&s).map_err(de::Error::custom)
}

impl CveDB {
    pub async fn new(config_path: &str) -> Result<Self, Box<dyn std::error::Error>> {
        let mut buffer = String::new();

        File::open(&config_path)?.read_to_string(&mut buffer)?;
        let config: CveDBConfig = serde_yaml::from_str(&buffer)?;

        Ok(CveDB{
            client: ClientBuilder::new().cookie_store(true).build()?,
            config: config,
            results: Vec::new(),
        })
    }

    pub async fn update(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        match &self.config.products{
            Some(products) => {
                for item in products {
                    match self.client.get(format!("https://www.cvedetails.com/json-feed.php?numrows=5&orderby=2&product_id={}", item.id)).send().await {
                        Ok(response) => {
                            match response.json::<Vec<Cve>>().await {
                                Ok(json) => {
                                    self.results.append(&mut vec![CveResult{ config: item.clone(), list: json}]);
                                },
                                Err(e) => println!("{:#?}", e),
                            }
                        },
                        Err(e) => println!("{:#?}", e),
                    }
                }        
            },
            None => {},
        }
        
        
        match &self.config.vendors {
            Some(vendors) => {
                for item in vendors {
                    match self.client.get(format!("https://www.cvedetails.com/json-feed.php?numrows=5&orderby=2&vendor_id={}", item.id)).send().await {
                        Ok(response) => {
                            match response.json::<Vec<Cve>>().await {
                                Ok(json) => {
                                    self.results.append(&mut vec![CveResult{ config: item.clone(), list: json}]);
                                },
                                Err(e) => println!("{:#?}", e),
                            }
                        },
                        Err(e) => println!("{:#?}", e),
                    }
                }
            },
            None => {},
        }
        Ok(())
    }
}