use reqwest::ClientBuilder;
use reqwest::header::AUTHORIZATION;

use serde::{Serialize, Deserialize, Deserializer, de};
use serde_json::json;
use std::error::Error;
use std::{io::Read, str::FromStr};
use std::fmt::Display;

use std::fs::File;

use chrono::{NaiveDate, NaiveDateTime};

use futures::future;

use super::Application;

#[derive(Debug, Deserialize, Serialize, Clone, Copy)]
#[repr(u8)]
pub enum Score {
    Unknown = 0,
    None = 1,
    Low = 2,
    Medium = 3,
    High = 4,
    Critical = 5,
}
impl TryFrom<u8> for Score {
    type Error = ();
    fn try_from(score: u8) -> Result<Self, Self::Error> {
        match score {
            0 => Ok(Score::Unknown),
            1 => Ok(Score::None),
            2 => Ok(Score::Low),
            3 => Ok(Score::Medium),
            4 => Ok(Score::High),
            5 => Ok(Score::Critical),
            _ => Err(()),
        }
    }
}

// #[derive(Debug, Deserialize)]
// pub struct ItemList {
//     items: Vec<Item>
// }

// #[derive(Debug, Deserialize)]
// pub struct Item {
//     pub item: String,
//     pub vendor: String,
//     pub product: String,
//     #[serde(skip_deserializing)]
//     pub vulnerabilities: Vec<Vulnerability>,
    
// }

#[derive(Debug, Deserialize)]
pub struct VulnerabilityResponse {
    pub hasMore: bool,
    pub limit: u16,    
    pub offset: u16,
    pub results: Vec<Vulnerability>,
}

// "guid": "CVE-2022-26500",
// "name": "CVE-2022-26500",
// "description": "Improper limitation of path names in Veeam Backup & Replication 9.5U3, 9.5U4,10.x, and 11.x allows remote authenticated users access to internal API functions that allows attackers to upload and execute arbitrary code.",
// "dataCategory": "Vulnerability",
// "dataScore": "High",
// "hasExploit": "0",
// "hasFix": "0",
// "createDateAtSource": "2022-03-17 21:15:00",
// "lastUpdatedAtSource": "2023-02-02 20:38:00",
// "dataType": "1"

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Vulnerability {
    #[serde(deserialize_with = "from_naivdatetime")]
    pub createDateAtSource: NaiveDateTime,
    dataCategory: String,
    pub dataScore: Score,
    #[serde(deserialize_with = "from_str")]
    dataType: u16,
    pub description: String,
    pub guid: String,
    #[serde(deserialize_with = "from_str")]
    hasExploit: u8,
    #[serde(deserialize_with = "from_str")]
    hasFix: u8,
    #[serde(deserialize_with = "from_naivdatetime")]
    pub lastUpdatedAtSource: NaiveDateTime,
    pub name: String,
}

// deserialize number from text
fn from_str<'de, T, D>(deserializer: D) -> Result<T, D::Error> where T: FromStr, T::Err: Display, D: Deserializer<'de> {
    let s = String::deserialize(deserializer)?;
    T::from_str(&s).map_err(de::Error::custom)
}
const FORMAT: &'static str = "%Y-%m-%d %H:%M:%S";
// deserialize date time format
pub fn from_naivdatetime<'de, D>(deserializer: D) -> Result<NaiveDateTime, D::Error> where D: Deserializer<'de> {
    let s = String::deserialize(deserializer)?;
    NaiveDateTime::parse_from_str(&s, FORMAT).map_err(serde::de::Error::custom)
}

impl Application {   
    pub async fn query(&self, baerer_token: &str) -> Result<Vec<Vulnerability>, Box<dyn std::error::Error>> {
        let client = reqwest::Client::new();
        // query for application and parse result
        //TODO: Inefficient, due to multiple connections to open...
        let result = client.get(format!("https://www.vulniq.com/api/vulnerability/list-by-vpv?vendorName={}&productName={}&productType=Application&pageNumber=1&resultsPerPage=5", self.vendor, self.product)).header(AUTHORIZATION, format!("Bearer {}", baerer_token)).send().await?;
        // println!("{:?}", result);
        // println!("{:?}", result.text().await?);

        // let test = r#"
        // {"limit":5,"offset":0,"results":[{"guid":"CVE-2022-22962","name":"CVE-2022-22962","description":"VMware Horizon Agent for Linux (prior to 22.x) contains a local privilege escalation as a user is able to change the default shared folder location due to a vulnerable symbolic link. Successful exploitation can result in linking to a root owned file.","dataCategory":"Vulnerability","dataScore":"High","hasExploit":"0","hasFix":"0","createDateAtSource":"2022-04-11 20:15:00","lastUpdatedAtSource":"2022-04-20 17:15:00","dataType":"1"},{"guid":"CVE-2022-22964","name":"CVE-2022-22964","description":"VMware Horizon Agent for Linux (prior to 22.x) contains a local privilege escalation that allows a user to escalate to root due to a vulnerable configuration file.","dataCategory":"Vulnerability","dataScore":"High","hasExploit":"0","hasFix":"0","createDateAtSource":"2022-04-11 20:15:00","lastUpdatedAtSource":"2022-04-20 17:15:00","dataType":"1"},{"guid":"CVE-2021-21988","name":"CVE-2021-21988","description":"VMware Workstation (16.x prior to 16.1.2) and Horizon Client for Windows (5.x prior to 5.5.2) contain out-of-bounds read vulnerability in the Cortado ThinPrint component (JPEG2000 Parser). A malicious actor with access to a virtual machine or remote desktop may be able to exploit these issues leading to information disclosure from the TPView process running on the system where Workstation or Horizon Client for Windows is installed.","dataCategory":"Vulnerability","dataScore":"High","hasExploit":"0","hasFix":"0","createDateAtSource":"2021-05-24 12:15:00","lastUpdatedAtSource":"2021-06-04 19:37:00","dataType":"1"},{"guid":"CVE-2021-21987","name":"CVE-2021-21987","description":"VMware Workstation (16.x prior to 16.1.2) and Horizon Client for Windows (5.x prior to 5.5.2) contain out-of-bounds read vulnerability in the Cortado ThinPrint component (TTC Parser). A malicious actor with access to a virtual machine or remote desktop may be able to exploit these issues leading to information disclosure from the TPView process running on the system where Workstation or Horizon Client for Windows is installed.","dataCategory":"Vulnerability","dataScore":"High","hasExploit":"0","hasFix":"0","createDateAtSource":"2021-05-24 12:15:00","lastUpdatedAtSource":"2021-06-04 19:32:00","dataType":"1"},{"guid":"CVE-2021-21989","name":"CVE-2021-21989","description":"VMware Workstation (16.x prior to 16.1.2) and Horizon Client for Windows (5.x prior to 5.5.2) contain out-of-bounds read vulnerability in the Cortado ThinPrint component (TTC Parser). A malicious actor with access to a virtual machine or remote desktop may be able to exploit these issues leading to information disclosure from the TPView process running on the system where Workstation or Horizon Client for Windows is installed.","dataCategory":"Vulnerability","dataScore":"High","hasExploit":"0","hasFix":"0","createDateAtSource":"2021-05-24 12:15:00","lastUpdatedAtSource":"2021-06-04 19:27:00","dataType":"1"}],"hasMore":true}
        // "#;

        let vulnerabilities = result.json::<VulnerabilityResponse>().await?.results;
        // let x: serde_json::Value = serde_json::from_str(test).unwrap();
        // println!("{:?}", x);

        // let vulnerabilities: VulnerabilityResponse = serde_json::from_str(test).unwrap();
        // println!("{:?}", vulnerabilities);
        // let vulnerabilities = Vec::new();
        Ok(vulnerabilities)
    }
}